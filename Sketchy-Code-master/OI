
package edu.wpi.first.wpilibj.templates;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.templates.commands.*;
//import edu.wpi.first.wpilibj.templates.commands.IndexerTrigger;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

private static OI instance = null;
private Joystick left_stick;
private Joystick right_stick;
private Joystick shooterstick;
public static final int PNEUMATIC_UP_BUTTON = 5;
public static final int PNEUMATIC_DOWN_BUTTON = 4;
public static final int PNEUMATIC_OFF = 2;
//VariableSpeed = new int;


private OI() {
    left_stick = new Joystick(RobotMap.LEFT_JOYSTICK_PORT);
    right_stick = new Joystick(RobotMap.RIGHT_JOYSTICK_PORT);
    shooterstick = new Joystick(RobotMap.SHOOTER_JOYSTICK_PORT);
    
    Button button1L = new JoystickButton(shooterstick, 1);
    button1L.whenPressed(new lightsSHOOT(1.0f));
    button1L.whenReleased(new lightsSHOOT(0.0f));
    
    Button button2 = new JoystickButton(shooterstick, 2);
    button2.whenPressed(new ShooterSetSpeed(1.0f));
    button2.whenPressed(new lightsSHOOT(.08f));
    button2.whenReleased(new lightsSHOOT(0.0f));
    button2.whenReleased(new ShooterSetSpeed(0.0f));
 
    Button button3 = new JoystickButton(shooterstick, 3);
    button3.whenPressed(new ShooterSetSpeed(.80f));
    button3.whenPressed(new lightsSHOOT(0.08f));
    button3.whenReleased(new lightsSHOOT(0.0f));
    button3.whenReleased(new ShooterSetSpeed(0.0f));
    if(shooterstick.getRawButton(3)) {
        System.out.print("only 77!");
    }
        
    Button button4 = new JoystickButton(shooterstick, 4);
    button4.whenPressed(new ShooterSetSpeed(.5f));
    button4.whenPressed(new lightsSHOOT(0.08f));
    button4.whenReleased(new lightsSHOOT(0.0f));
    button4.whenReleased(new ShooterSetSpeed(0.0f));
    if(shooterstick.getRawButton(4)) {
        System.out.print("only 75! This is the Butter Zone");
    }

    Button button5 = new JoystickButton(shooterstick, 5);
    button5.whenPressed(new ShooterSetSpeed(.9f));
    button5.whenPressed(new lightsSHOOT(.08f));
    button5.whenReleased(new lightsSHOOT(0.0f));
    button5.whenReleased(new ShooterSetSpeed(0.0f));
    if(shooterstick.getRawButton(5)) {
        System.out.print("only 100!");
    }

    Button button6 = new JoystickButton(shooterstick, 6);
    button6.whenPressed(new ShooterSetSpeed(0.92f));
    button6.whenPressed(new lightsSHOOT(.08f));
    button6.whenReleased(new lightsSHOOT(0.0f));
    button6.whenReleased(new ShooterSetSpeed(0.0f));
    
    Button button11 = new JoystickButton(shooterstick, 11);
    button11.whenPressed(new ShooterSetSpeed(1.0f));
    button11.whenPressed(new lightsSHOOT(1.0f));
    button11.whenReleased(new lightsSHOOT(0.0f));
    button11.whenReleased(new ShooterSetSpeed(0.0f));
    
    Button button10 = new JoystickButton(shooterstick, 11);
    button10.whenPressed(new ShooterSetSpeed(1.0f));
    button10.whenPressed(new lightsSHOOT(1.0f));
    button10.whenReleased(new lightsSHOOT(0.0f));
    button10.whenReleased(new ShooterSetSpeed(0.0f));
    
    Button button4ls = new JoystickButton(right_stick, 4);
    button4ls.whenPressed(new lightsSHOOT(0.08f));
    
    
    Button button5ls = new JoystickButton(right_stick, 5);
    button5ls.whenPressed(new lightsSHOOT(0.0f));
 
}
//return a new instance of the OI class
public static OI getInstance(){
    if (instance == null) {
        instance = new OI ();
        /*
        System.out.print("OI Instance Created.\r\n");
        System.out.print("Left joystick port: " + RobotMap.LEFT_JOYSTICK_PORT + "\r\n");
        System.out.print("Right joystick port: " + RobotMap.RIGHT_JOYSTICK_PORT + "\r\n");
        System.out.print("Left motor port: " + RobotMap.LEFTDRIVE_MOTOR_PORT + "\r\n");
        System.out.print("Right motor port: " + RobotMap.RIGHTDRIVE_MOTOR_PORT + "\r\n");
        System.out.print("Shooter motor port: " + RobotMap.SHOOTER_MOTOR_PORT + "\r\n");
        * */
    }
 //System.out.print("OI getInstance Called.\r\n");
 return instance;
}

//return the value of the left joystick
public Joystick getLeftJoystick() {
        return left_stick;
}
//return the value of the right joystick
public Joystick getRightJoystick() {
        return right_stick;
}
public Joystick getShooterJoystick() {
    return shooterstick;
}
}

